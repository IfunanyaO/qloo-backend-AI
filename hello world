üî• Now you're entering the final phase of CultureTrip Planner: generating the culturally intelligent itinerary using LLMs, and displaying it with Tailwind-styled daily cards, map links, and share/export options.

‚úÖ Step-by-Step Game Plan
1. LLM Prompt Strategy (Input + Context)
Use GPT-4 to combine Qloo results + extracted trip data into a meaningful itinerary.

Example Prompt (Python service):
python
Copy
Edit
system_prompt = (
    "You're a culturally intelligent travel assistant. Based on the provided tastes, location, and Qloo recommendations, "
    "generate a personalized travel itinerary. Include a daily breakdown with morning, afternoon, and evening activities. "
    "Use map-friendly place names and format the output in structured JSON for rendering."
)

user_prompt = {
    "destination": "Lisbon",
    "duration": "5 days",
    "tastes": ["jazz", "seafood", "indie bookstores"],
    "style": ["relaxing", "low budget"],
    "qloo_results": qloo_api_response
}
Use in client.chat.completions.create(...)
2. Example GPT-Generated Output Format (from LLM)
json
Copy
Edit
{
  "itinerary": [
    {
      "day": 1,
      "morning": "Explore Alfama district, grab breakfast at Pois Caf√©.",
      "afternoon": "Visit indie bookstore Ler Devagar in LX Factory.",
      "evening": "Live jazz at Hot Clube de Portugal.",
      "map_links": [
        "https://maps.google.com/?q=Pois+Caf√©+Lisbon",
        "https://maps.google.com/?q=Hot+Clube+de+Portugal"
      ]
    },
    {
      "day": 2,
      "morning": "Relax at Miradouro da Gra√ßa viewpoint.",
      "afternoon": "Seafood lunch at Ramiro, local fish market visit.",
      "evening": "Attend an outdoor film or jazz set at local venue."
    }
    // ... for each day
  ]
}
3. Frontend UI (React + Tailwind CSS)
Component: ItineraryCard.tsx
tsx
Copy
Edit
import React from "react";

export default function ItineraryCard({ day, morning, afternoon, evening, mapLinks }) {
  return (
    <div className="bg-white shadow-md rounded-2xl p-5 mb-6 border border-gray-100">
      <h2 className="text-xl font-semibold mb-2">Day {day}</h2>
      <ul className="space-y-1 text-gray-700">
        <li><strong>Morning:</strong> {morning}</li>
        <li><strong>Afternoon:</strong> {afternoon}</li>
        <li><strong>Evening:</strong> {evening}</li>
      </ul>
      {mapLinks?.length > 0 && (
        <div className="mt-3 space-y-1">
          <p className="font-medium text-sm">üìç Map Links:</p>
          {mapLinks.map((url, i) => (
            <a key={i} href={url} target="_blank" className="text-blue-500 underline text-sm">
              View {i + 1}
            </a>
          ))}
        </div>
      )}
    </div>
  );
}
4. Optional Features
üîÅ Regenerate Itinerary button (calls /extract-info + /plan-trip + GPT again)

üíæ Export to PDF using react-to-print or jspdf

üîó Share Itinerary via unique link or social (Next.js + Supabase for user accounts)

üó∫Ô∏è Map Previews via Mapbox or Leaflet pins

‚úÖ Backend Endpoint for Generation
Add to your FastAPI backend:

python
Copy
Edit
@router.post("/generate-itinerary")
async def generate_itinerary(payload: TripDataWithInsights):
    system_prompt = "You are a culturally intelligent assistant..."  # same as above
    user_input = payload.dict()

    completion = client.chat.completions.create(
        model="gpt-4",
        messages=[
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": json.dumps(user_input)}
        ]
    )

    raw_output = completion.choices[0].message.content
    try:
        itinerary = json.loads(raw_output)
        return itinerary
    except json.JSONDecodeError:
        raise HTTPException(500, detail="GPT returned invalid JSON.")
Need Help With?
‚úÖ Itinerary schema + output validation?

üñºÔ∏è Tailwind layout for entire trip planner UI?

üß† Building a chat interface around this logic?

Just say the word, Captain CultureTrip üß≥‚ú®






def generate_itinerary(
    original_prompt: str,
    destination: str,
    duration: str,
    tastes: List[str],
    style: List[str],
    qloo_places: List[dict] = None,
    weather_forecast: str = "",
    demographics_summary: str = "",
    related_tags: List[str] = [],
    heatmap_neighborhoods: List[str] = []
) -> str:
    qloo_places = qloo_places or []

    def format_place(place):
        name = place.get("name", "Unknown Place")
        props = place.get("properties", {})
        address = props.get("address", "")
        website = props.get("website", "")
        phone = props.get("phone", "")
        rating = props.get("business_rating")
        cost_estimate = props.get("average_cost", "Estimate not available")
        keywords = [kw["name"] for kw in props.get("keywords", [])][:3]

        details = f"""- **{name}**
  üìç [Map it](https://www.google.com/maps/search/?api=1&query={name.replace(' ', '+')}+{destination})
  {'üìû ' + phone if phone else ''}
  {'üåê ' + website if website else ''}
  {'‚≠ê Rating: ' + str(rating) if rating else ''}
  {'üí∏ Estimated cost: ' + str(cost_estimate) if cost_estimate else ''}
  {'üîë Keywords: ' + ', '.join(keywords) if keywords else ''}
"""
        return details

    formatted_places = "\n".join([format_place(place) for place in qloo_places]) or "No recommended places available."
    weather_forecast = fetch_weather_forecast(destination)

    # Compose the GPT prompt
    prompt = f"""
You are a culturally intelligent travel planner.

A user said: "{original_prompt}"

Create a personalized **{duration}** itinerary for a trip to **{destination}**. The traveler prefers:

**Tastes**: {', '.join(tastes)}
**Travel Style**: {', '.join(style)}
**Weather Forecast**: 
{weather_forecast}

Use the following place insights to plan activities. Include them in appropriate time slots (morning, afternoon, evening):

{formatted_places}

Also consider:
- **Demographics**: {demographics_summary or "N/A"}
- **Related Tags**: {', '.join(related_tags) or "N/A"}
- **Hotspots**: {', '.join(heatmap_neighborhoods) or "N/A"}

For each day:
- Suggest a **morning**, **afternoon**, and **evening** activity
- Mention if a place has a **high rating**, **website**, or **keywords** that align with tastes
- Add a **rough cost range** if available or say "budget-friendly" if unknown
- Suggest ideal times to go if it‚Äôs a meal place, music venue, bookstore, etc.
- Incorporate any additional details or context found in the original user input: {original_prompt}
- Reference weather conditions gotten from **Weather Forecast**: 
{weather_forecast}

End the itinerary with a short, stylish **trip summary caption** (Instagram-worthy).

Make the format readable and fun!
"""

    response = client.chat.completions.create(
        model="gpt-4",
        messages=[
            {"role": "system", "content": "You are a culturally intelligent travel planner that creates rich, fun, and personalized itineraries."},
            {"role": "user", "content": prompt}
        ]
    )

    return response.choices[0].message.content